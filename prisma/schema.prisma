generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id                     Int              @id @default(autoincrement())
  email                  String           @unique(map: "email_UNIQUE") @db.VarChar(45)
  password               Bytes            @db.Binary(64)
  salt                   Bytes            @db.Binary(64)
  adminsEventOrganizerId Int?             @map("admins_event_organiser")
  isGlobalAdmin          Boolean          @default(false) @map("is_global_admin")
  lastLogin              DateTime?        @map("last_login") @db.Timestamp(0)
  lastPasswordChange     DateTime?        @map("last_password_change") @db.Timestamp(0)
  roles                  AdminUserRoles[]
  adminsEventOrganizer   EventOrganizer?  @relation("admin_usersToevent_organizers", fields: [adminsEventOrganizerId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "admins_event_organiser")
  images                 Image[]          @relation("admin_usersToimages")

  @@index([email], map: "email_INDEX")
  @@index([adminsEventOrganizerId], map: "admins_event_organiser")
  @@map("admin_users")
}

model Event {
  id                   Int            @id @default(autoincrement())
  title                String         @db.Text
  description          String         @db.Text
  date                 DateTime       @db.DateTime(0)
  online               Boolean        @default(dbgenerated("(b'0')")) @db.Bit(1)
  eventType            String         @default("") @map("event_type") @db.Text
  venue                String?        @db.Text
  venueAddress         String?        @db.Text
  venueData            String?        @db.LongText
  participationLink    String?        @map("participation_link") @db.Text
  registrationDeadline DateTime?      @map("registration_deadline") @db.DateTime(0)
  registrationLink     String?        @map("registration_link") @db.Text
  price                String?        @db.Text
  image                String         @db.Char(16)
  clicks               Int            @default(0)
  organizer            Int            @map("organiser")
  eventOrganizer       EventOrganizer @relation("event_organizersToevents", fields: [organizer], references: [id], onUpdate: Restrict, map: "organiser")

  @@index([organizer], map: "organiser_idx")
  @@map("events")
}

model EventOrganizer {
  id              Int         @id @default(autoincrement())
  name            String      @db.Text
  description     String      @db.Text
  logoImg         String      @map("logo_img") @db.Char(16)
  coverImg        String?     @map("cover_img") @db.Char(16)
  eventLimit      Int         @default(10) @map("event_limit")
  socialWebsite   String?     @map("social_website") @db.VarChar(250)
  socialEmail     String?     @map("social_email") @db.VarChar(250)
  socialPhone     String?     @map("social_phone") @db.VarChar(250)
  socialFacebook  String?     @map("social_facebook") @db.VarChar(250)
  socialInstagram String?     @map("social_instagram") @db.VarChar(250)
  socialTwitter   String?     @map("social_twitter") @db.VarChar(250)
  socialLinkedin  String?     @map("social_linkedin") @db.VarChar(250)
  socialTiktok    String?     @map("social_tiktok") @db.VarChar(250)
  socialYoutube   String?     @map("social_youtube") @db.VarChar(250)
  socialTelegram  String?     @map("social_telegram") @db.VarChar(250)
  admins          AdminUser[] @relation("admin_usersToevent_organizers")
  events          Event[]     @relation("event_organizersToevents")

  @@map("event_organisers")
}

model Image {
  id                      String       @id @db.Char(16)
  mimeType                String       @map("mime_type") @db.VarChar(150)
  ownerId                 Int          @map("owner")
  dateCreated             DateTime     @default(now()) @map("date_created") @db.Timestamp(0)
  owner                   AdminUser    @relation("admin_usersToimages", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "owner")
  usedAsInfoScreenMediaDe InfoScreen[] @relation("info_screens_media_deToimages")
  usedAsInfoScreenMediaEn InfoScreen[] @relation("info_screens_media_enToimages")

  @@index([ownerId], map: "owner_idx")
  @@map("images")
}

model InfoScreen {
  id             Int       @id @default(autoincrement())
  comment        String    @db.Text
  position       Float     @db.Float
  campaignStart  DateTime? @map("campaign_start") @db.DateTime(0)
  campaignEnd    DateTime? @map("campaign_end") @db.DateTime(0)
  mediaDeId      String?   @map("media_de") @db.Char(16)
  mediaEnId      String?   @map("media_en") @db.Char(16)
  externalLinkDe String?   @map("external_link_de") @db.Text
  externalLinkEn String?   @map("external_link_en") @db.Text
  mediaDe        Image?    @relation("info_screens_media_deToimages", fields: [mediaDeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "info_screens_ibfk_1")
  mediaEn        Image?    @relation("info_screens_media_enToimages", fields: [mediaEnId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "info_screens_ibfk_2")

  @@index([mediaDeId], map: "media_de")
  @@index([mediaEnId], map: "media_en")
  @@map("info_screens")
}

model AdminUserRoles {
  userId Int       @map("user")
  role   String    @db.VarChar(45)
  user   AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "admin_user_roles_ibfk_1")

  @@id([userId, role])
  @@map("admin_user_roles")
}
